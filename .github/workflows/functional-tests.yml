name: Functional Tests
on:
  push:
    branches: [ test ]

jobs:
  
  prep:
    runs-on: [self-hosted, macOS]
    steps:
      - uses: actions/checkout@v2
      - name: pull test prep 1
        id: pull-test-prep-1
        uses: ./
        with:
          anka-registry-pull-options: "-s" # Needed to remove other cached tags and cause openjdk pull to take a while so we can test the Lock file
          anka-template: "10.15.4"
          anka-tag: "base"
          anka-run-options: "-n"
          commands: "echo 123"

  functional-tests:
    runs-on: [self-hosted, macOS]
    needs: prep
    steps:
      - uses: actions/checkout@v2
      - name: pull test prep 2
        id: pull-test-prep-2
        uses: ./
        with:
          host-pre-commands: "env"
          anka-template: "10.15.4"
          anka-tag: "base:port-forward-22:brew-git:openjdk-1.8.0_242:jenkins"
          commands: "echo 123"

      - name: basic commands
        id: basic
        uses: ./
        with:
          anka-template: "10.15.4"
          anka-tag: "base:port-forward-22:brew-git"
          commands: |
            env
            ls -laht ./
            ls -laht ../
            pwd
            echo "HERE" && \
            echo "THERE HERE WHERE"

      - name: chained commands and redirection into file
        id: chained-redirect
        uses: ./
        with:
          anka-template: "10.15.4"
          commands: "hostname && echo \"test1\" && echo \"Test2\" > /tmp/test && cat /tmp/test"

      - name: script execution with args
        id: script-and-args
        uses: ./
        with:
          anka-run-options: "--wait-network --wait-time"
          anka-template: "10.15.4"
          anka-tag: "base"
          commands: "hostname && ./test.bash 1 2 3 4"

      - name: inputs are accepted and working
        id: inputs-testing
        uses: ./
        with:
          anka-template: "10.15.4"
          anka-tag: "DOESNOTEXIST"
          skip-registry-pull: true
          anka-custom-vm-label: "custom-label-${GITHUB_RUN_NUMBER}"
          commands: |
            env
            ls -laht ./
            ls -laht ../
            pwd
            echo "HERE" && \
            echo "THERE HERE WHERE"
          host-pre-commands: "echo PRE COMMANDS"
          host-post-commands: "echo POST COMMANDS && echo \"CWD: $(pwd)\""
          anka-start-options: "-f"
          anka-run-options: "--workdir /tmp"
          host-command-options: |
            {
              cwd: "/tmp",
              silent: false
            }

      - name: artifacts
        id: artifacts-1
        uses: ./
        with:
          anka-template: "10.15.4"
          anka-tag: base
          anka-custom-vm-label: "custom-label-${GITHUB_RUN_NUMBER}"
          commands: |
            env
            ls -laht ./ > ./test3
            ls -laht ../ > /private/var/tmp/ankafs.0/test2
            pwd > test1
            echo "HERE" && \
            echo "THERE HERE WHERE"
          host-pre-commands: "echo PRE COMMANDS"
          host-post-commands: "echo POST COMMANDS && echo \"CWD: $(pwd)\""
          anka-start-options: "-f"
          artifact-archive-file-name: "test-artifact"
          artifact-files: |

            ./test1
            test2
            test3

      # [[ ]] testing doesn't like when you interpolate a multi-line ${{ steps. . . }} right in the -z ""; set it to a variable first, then test a single line
      - name: Check for output (testing anything execute.test.js doesn't)
        run: |
          BASIC_STD="${{ steps.basic.outputs.std }}"
          printf "basic std ========================\n${{ steps.basic.outputs.std }}"
          [[ ! -z "$(echo $BASIC_STD | head -n 1)" ]] || exit 10
          [[ -z "$(echo $BASIC_STD | grep 'jenkins')" ]] || exit 11
          
          CHAINED_REDIRECT_STD="${{ steps.chained-redirect.outputs.std }}"
          printf "\nchained-redirect stdout ========================\n${{ steps.chained-redirect.outputs.std }}"
          [[ ! -z "$(echo $CHAINED_REDIRECT_STD | head -n 1)" ]] || exit 20
          
          SCRIPT_AND_ARGS_STD="${{ steps.script-and-args.outputs.std }}"
          printf "\nscript-and-args stdout ========================\n${{ steps.script-and-args.outputs.std }}"
          [[ ! -z "$(echo $SCRIPT_AND_ARGS_STD | head -n 1)" ]] || exit 30
          [[ ! -z "$(echo $SCRIPT_AND_ARGS_STD | grep '| 10.15.4 (base)')" ]] || exit 31
          
          INPUTS_TESTING_STD="${{ steps.inputs-testing.outputs.std }}"
          printf "\ninputs-testing stdout ========================\n${{ steps.inputs-testing.outputs.std }}"
          [[ ! -z "$(echo $INPUTS_TESTING_STD | head -n 1)" ]] || exit 40
          [[ ! -z "$(echo $INPUTS_TESTING_STD | grep 'PRE COMMANDS')" ]] || exit 41
          [[ ! -z "$(echo $INPUTS_TESTING_STD | grep 'POST COMMANDS')" ]] || exit 42
          [[ ! -z "$(echo $INPUTS_TESTING_STD | grep '| custom-label-')" ]] || exit 43
          [[ ! -z "$(echo $INPUTS_TESTING_STD | grep 'CWD: /private/tmp')" ]] || exit 44
          [[ ! -z "$(echo $INPUTS_TESTING_STD | grep 'PWD=/private/tmp')" ]] || exit 45

          ARTIFACTS_ONE_STD="${{ steps.artifacts-1.outputs.std }}"
          printf "\nartifacts-1 stdout ========================\n${{ steps.artifacts-1.outputs.std }}"
          [[ ! -z "$(echo $ARTIFACTS_ONE_STD | head -n 1)" ]] || exit 50
          [[ ! -z "$(echo $ARTIFACTS_ONE_STD | grep 'Created and uploaded artifact test-artifact')" ]] || exit 51
          [[ ! -z "$(echo $ARTIFACTS_ONE_STD | grep 'Archive contents:.*/test1.*/test2.*/test3')" ]] || exit 52
          
          true
          

  functional-tests-second-agent:
    runs-on: [self-hosted, macOS]
    needs: prep
    steps:
      - uses: actions/checkout@v2
      - name: sleep
        run: "sleep 20"
      - name: pull test 2
        id: pull-test-2
        uses: ./
        with:
          anka-template: "10.15.4"
          anka-tag: "base:port-forward-22"
          commands: |
            env
            ls -laht ./
            ls -laht ../
            pwd
            echo "HERE" && \
            echo "THERE HERE WHERE"

      - name: Check for output (testing anything execute.test.js doesn't)
        run: |
          PULL_TEST_STD="${{ steps.pull-test-2.outputs.std }}"
          printf "pull test std ========================\n${{ steps.pull-test-2.outputs.std }}"
          [[ ! -z "$(echo $PULL_TEST_STD | head -n 1)" ]] || exit 50
          [[ ! -z "$(echo $PULL_TEST_STD | grep 'Lock file /tmp/registry-pull-lock-10.15.4 found')" ]] || exit 51
          
          true
